name: ByteMotion AB NodeJS CI - Build, Test, and Publish

on:
  workflow_call:
    inputs:
      check-in-build-result:
        description: 'True to check in result of running "npm run build"'
        required: false
        type: boolean
    secrets:
      GIT_USER_EMAIL:
        required: true
      GIT_USER_NAME:
        required: true
      NPM_TOKEN:
        required: true
      PERSONAL_ACCESS_TOKEN:
        required: true

jobs:
  test:
    if: github.actor != 'bytemotion-git'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
    - name: 'Checkout repository and submodules'
      uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    - run: |
        npm install --ignore-scripts
        npm rebuild
        npm run build --if-present
        npm test
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org/

      - name: Github Event
        run: |
          echo ${{ github.event_name }}
          echo ${{ github.event.action }}
          echo ${{ github.event.pull_request  }}
          echo ${{ github.event.pull_request.merged }}

      - name: Set Major Release
        id: major_release
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        run: |
          echo "::set-output name=RELEASE::major"
          echo "::set-output name=TAG::latest"

      - name: Set Minor Release
        id: minor_release
        if: ${{ github.event_name == 'push' && github.event.pull_request.merged == true }}
        run: |
          echo "::set-output name=RELEASE::minor"
          echo "::set-output name=TAG::latest"

      - name: Set PreRelease Release
        id: prerelease_release
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == false }}
        run: |
          echo "::set-output name=RELEASE::prerelease --preid=rc"
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "::set-output name=TAG::${BRANCH}"

      - name: Tag and Publish
        id: tag_and_publish
        run: | 
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          RELEASE=${{ 
            steps.major_release.outputs.RELEASE ||
            steps.minor_release.outputs.RELEASE ||
            steps.prerelease_release.outputs.RELEASE ||
            'patch'
          }}
          if [ $RELEASE = "patch" -a $BRANCH != "master" ]; 
          then 
            exit 0
          fi
          echo "::set-output name=BRANCH::${BRANCH}"
          echo "::set-output name=RELEASE::${RELEASE}"
          TAG=${{ steps.prerelease_release.outputs.TAG || 'latest' }}
          echo "::set-output name=TAG::${TAG}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          npm install
          npm run build
          git status
          CHECKIN_BUILD=${{ inputs.check-in-build-result || false }}
          FILES_TO_COMMIT=$(git status --porcelain)
          if [[ -z ${FILES_TO_COMMIT} || ${CHECKIN_BUILD} = false ]];
          then
            echo "Not checking in build result"
            git checkout -- .
          else 
            echo "Checking in build result"
            git add .
            git commit -am 'CI build'
          fi
          npm version $RELEASE
          REPO=${{ github.event.repository.name }}
          echo "Pushing $RELEASE to $BRANCH at $REPO with tag $TAG..."
          ORIGIN=https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git remote set-url origin $ORIGIN
          git push origin $BRANCH --tags
          git push origin $BRANCH
          npm publish --tag $TAG
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
    
      - name: node-red-docker Repository Dispatch
        if: ${{ steps.tag_and_publish.outputs.TAG == 'latest' }}
        run: |
          JSON_PAYLOAD="{ \"event_type\": \"publish\" }"
          API_URL="https://api.github.com/repos/byte-motion/node-red-docker/dispatches"
          curl \
          --trace-ascii - \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
          ${API_URL} \
          -d "${JSON_PAYLOAD}"
